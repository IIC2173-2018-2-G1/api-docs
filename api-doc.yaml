swagger: "2.0"
info:
  description: "Documentaci칩n para proyecto 2018-2"
  version: "1.0.0"
  title: "Arquitr치n SPA API"
  # termsOfService: "http://swagger.io/terms/"
  # contact:
  #   email: "apiteam@swagger.io"
  # license:
  #   name: "Apache 2.0"
  #   url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "to-be-disclosed.com"
basePath: "/api/v1"
tags:
- name: "user"
  description: "Operaciones de usuarios"
- name: "channels"
  description: "Operaciones sobre canales"
- name: "messages"
  description: "Operaciones sobre mensajes"
- name: "reactions"
  description: "Operaciones sobre reacciones a mensajes"
- name: "hashtag"
  description: "Operaciones sobre hashtags"
schemes:
- "https"
- "http"
paths:
  /user:
    post:
      tags:
      - "user"
      summary: "crear usuario"
      description: ""
      operationId: "createUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        400:
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{user_name}:
    put:
      tags:
      - "user"
      summary: "Update user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/json"
      parameters:
      - name: "user_name"
        in: "path"
        description: "Username of user to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
      - name: "user_name"
        in: "path"
        description: "Username of user to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
  /user/{user_name}/reset-password:
    get:
      tags:
      - "user"
      summary: "Request for a password reset"
      description: ""
      operationId: "resetPassword"
      produces:
      - "application/json"
      parameters:
      - name: "user_name"
        in: "path"
        description: "Username of user on which to request password reset"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"

  /user/{user_name}/subscriptions:
    get:
      tags:
      - "user"
      - "channels"
      summary: "Get channels to which user is subscribed"
      description: "This can only be done by the logged in user."
      operationId: "getUserSubscriptions"
      produces:
      - "application/json"
      parameters:
      - name: "user_name"
        in: "path"
        description: "Username of user to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"

  /messages:
    post:
      tags:
      - "messages"
      summary: "Creates a new message"
      description: ""
      operationId: "createMessage"
    get:
      tags:
      - "messages"
      summary: "Gets an array of messages"
      description: "Starting from the newest message number _start_, returns the following _count_ messages for the given channel."
      operationId: "getMessages"
      produces:
      - "application/json"
      parameters:
      - name: "channel_id"
        in: "query"
        description: "Id of the channel for which to get messages"
        required: false
        type: "string"
      - name: "hashtag_id"
        in: "query"
        description: "Id of the hashtag for which to get messages"
        required: false
        type: "string"
      - name: "count"
        in: "query"
        description: "The ammount of messages to get."
        default: 20
        required: false
        type: "number"
      - name: "start"
        in: "query"
        description: "From which messafge to start."
        default: 1
        required:  false
        type: "number"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items: 
              $ref: "#/definitions/Message"
        400:
          description: "Invalid channel id supplied"
  
  /messages/{message_id}:
    get:
      tags:
      - "messages"
      summary: "Gets a specific message"
      description: ""
      operationId: "getMessage"
    put:
      tags:
      - "messages"
      summary: "Updates an existing message"
      description: ""
      operationId: "createMessage"

  /channels:
    get:
      tags:
        - "channels"
      summary: "Obtener una lista de todos los canales"
    post:
      tags:
      - "channels"
      summary: "Crear un nuevo canal"
      description: ""
      operationId: "createChannel"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created channel object"
        required: true
        schema:
          $ref: "#/definitions/Channel"
      responses:
        default:
          description: "successful operation"
    
  /channels/{channel_id}:
    get:
      tags:
      - "channels"
      summary: "Obtener la informaci칩n de un canal"
    post:
      tags:
      - "channels"
      summary: "Realizar una acci칩n sobre un canal"
      description: ""
      operationId: "createChannel"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created channel object"
        required: true
        schema:
          $ref: "#/definitions/Channel"
      responses:
        default:
          description: "successful operation"
  
  /channels/{channel_id}/messages:
    get:
      tags:
      - "channels"
      - "messages"
      summary: "Obtener los mensajes de un canal"
    post:
      tags:
      - "channels"
      summary: "Agregar un nuevo mensaje a un canal"
      description: ""
      operationId: "createChannel"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created channel object"
        required: true
        schema:
          $ref: "#/definitions/Channel"
      responses:
        default:
          description: "successful operation"

  /reactions:
    get:
      tags:
      - "reactions"
      summary: "Get all reactions"

  /reactions/{message_id}:
    get:
      tags:
      - "reactions"
      summary: "Get all reactions for a given message"
    post:
      tags:
      - "reactions"
      summary: "Add or update a reaction to a message"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/json"
      parameters:
      - name: "user_name"
        in: "path"
        description: "Username of user to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
    delete:
      tags:
      - "reactions"
      summary: "Delete a reaction to a message"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
      - name: "user_name"
        in: "path"
        description: "Username of user to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
          
securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      petId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "placed"
        - "approved"
        - "delivered"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Order"
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  Pet:
    type: "object"
    required:
    - "name"
    - "photoUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "doggie"
      photoUrls:
        type: "array"
        xml:
          name: "photoUrl"
          wrapped: true
        items:
          type: "string"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "pet status in the store"
        enum:
        - "available"
        - "pending"
        - "sold"
    xml:
      name: "Pet"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"